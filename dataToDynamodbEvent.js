"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const aws_sdk_1 = require("aws-sdk");
const vehicles = [
    {
        id: '20211021_R4567GT',
        arrivalPurpose: 'CARGO_IMPORT',
        netWeight: 0,
        status: 'ARRIVED',
        borderCheckpoint: '',
        driver: {
            name: 'Anyone',
        },
        operator: {
            id: '093c7baf-896b-4fd0-bc05-253eb7fac606',
            organization: {
                name: '',
                id: '53ddbae9-0d27-420a-b692-6221e734b194',
            },
        },
        tareWeight: 0,
        departureCountry: 'China',
        organization: {
            name: '',
            id: '53ddbae9-0d27-420a-b692-6221e734b194',
        },
        weightType: 'GROSS',
        vehiclePlateNumber: 'R4567GT',
        grossWeight: 300,
        arrivalDate: 1634806747244,
    },
    {
        id: '20211003_05KG998AAO',
        arrivalPurpose: 'CARGO_IMPORT',
        netWeight: 0,
        status: 'DEPARTED',
        borderCheckpoint: 'Irkeshtam',
        driver: {
            name: 'Шакенов Э',
        },
        operator: {
            id: '093c7baf-896b-4fd0-bc05-253eb7fac606',
            organization: {
                name: '',
                id: '53ddbae9-0d27-420a-b692-6221e734b194',
            },
        },
        tareWeight: 0,
        departureCountry: 'China',
        organization: {
            name: '',
            id: '53ddbae9-0d27-420a-b692-6221e734b194',
        },
        weightType: 'GROSS',
        departureDate: 1633286561819,
        vehiclePlateNumber: '05KG998AAO',
        grossWeight: 0,
        arrivalDate: 1633282315813,
    },
];
async function convertToEvent() {
    const dynamodbStreamEvent = {
        Records: vehicles.map((vehicle) => {
            if (vehicle.status === 'ARRIVED') {
                return getCreateRecordTemplate({
                    eventName: 'INSERT',
                    data: vehicle,
                    tableName: 'Vehicles',
                });
            }
            else {
                return getUpdateRecordTemplate({
                    eventName: 'MODIFY',
                    data: vehicle,
                    tableName: 'Vehicles',
                });
            }
        }),
    };
    console.log(JSON.stringify(dynamodbStreamEvent, null, 2));
    function getCreateRecordTemplate(input) {
        const { eventName, data, tableName } = input;
        const marshalledData = aws_sdk_1.DynamoDB.Converter.marshall(data);
        return {
            eventName,
            dynamodb: {
                Keys: {
                    id: {
                        S: data.id,
                    },
                },
                NewImage: marshalledData,
                OldImage: marshalledData,
            },
            eventSourceARN: `arn:aws:dynamodb:region:123456789012:table/${tableName}/stream/2016-11-16T20:42:48.104`,
        };
    }
    function getUpdateRecordTemplate(input) {
        const { eventName, data, tableName } = input;
        const marshalledData = aws_sdk_1.DynamoDB.Converter.marshall(data);
        return {
            eventName,
            dynamodb: {
                Keys: {
                    id: {
                        S: data.id,
                    },
                },
                NewImage: marshalledData,
                OldImage: {
                    ...marshalledData,
                    status: 'DEPARTED',
                },
            },
            eventSourceARN: `arn:aws:dynamodb:region:123456789012:table/${tableName}/stream/2016-11-16T20:42:48.104`,
        };
    }
}
convertToEvent();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YVRvRHluYW1vZGJFdmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImRhdGFUb0R5bmFtb2RiRXZlbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSxxQ0FBbUM7QUFFbkMsTUFBTSxRQUFRLEdBQUc7SUFDZjtRQUNFLEVBQUUsRUFBRSxrQkFBa0I7UUFDdEIsY0FBYyxFQUFFLGNBQWM7UUFDOUIsU0FBUyxFQUFFLENBQUM7UUFDWixNQUFNLEVBQUUsU0FBUztRQUNqQixnQkFBZ0IsRUFBRSxFQUFFO1FBQ3BCLE1BQU0sRUFBRTtZQUNOLElBQUksRUFBRSxRQUFRO1NBQ2Y7UUFDRCxRQUFRLEVBQUU7WUFDUixFQUFFLEVBQUUsc0NBQXNDO1lBQzFDLFlBQVksRUFBRTtnQkFDWixJQUFJLEVBQUUsRUFBRTtnQkFDUixFQUFFLEVBQUUsc0NBQXNDO2FBQzNDO1NBQ0Y7UUFDRCxVQUFVLEVBQUUsQ0FBQztRQUNiLGdCQUFnQixFQUFFLE9BQU87UUFDekIsWUFBWSxFQUFFO1lBQ1osSUFBSSxFQUFFLEVBQUU7WUFDUixFQUFFLEVBQUUsc0NBQXNDO1NBQzNDO1FBQ0QsVUFBVSxFQUFFLE9BQU87UUFDbkIsa0JBQWtCLEVBQUUsU0FBUztRQUM3QixXQUFXLEVBQUUsR0FBRztRQUNoQixXQUFXLEVBQUUsYUFBYTtLQUMzQjtJQUNEO1FBQ0UsRUFBRSxFQUFFLHFCQUFxQjtRQUN6QixjQUFjLEVBQUUsY0FBYztRQUM5QixTQUFTLEVBQUUsQ0FBQztRQUNaLE1BQU0sRUFBRSxVQUFVO1FBQ2xCLGdCQUFnQixFQUFFLFdBQVc7UUFDN0IsTUFBTSxFQUFFO1lBQ04sSUFBSSxFQUFFLFdBQVc7U0FDbEI7UUFDRCxRQUFRLEVBQUU7WUFDUixFQUFFLEVBQUUsc0NBQXNDO1lBQzFDLFlBQVksRUFBRTtnQkFDWixJQUFJLEVBQUUsRUFBRTtnQkFDUixFQUFFLEVBQUUsc0NBQXNDO2FBQzNDO1NBQ0Y7UUFDRCxVQUFVLEVBQUUsQ0FBQztRQUNiLGdCQUFnQixFQUFFLE9BQU87UUFDekIsWUFBWSxFQUFFO1lBQ1osSUFBSSxFQUFFLEVBQUU7WUFDUixFQUFFLEVBQUUsc0NBQXNDO1NBQzNDO1FBQ0QsVUFBVSxFQUFFLE9BQU87UUFDbkIsYUFBYSxFQUFFLGFBQWE7UUFDNUIsa0JBQWtCLEVBQUUsWUFBWTtRQUNoQyxXQUFXLEVBQUUsQ0FBQztRQUNkLFdBQVcsRUFBRSxhQUFhO0tBQzNCO0NBQ0YsQ0FBQztBQVFGLEtBQUssVUFBVSxjQUFjO0lBQzNCLE1BQU0sbUJBQW1CLEdBQXdCO1FBQy9DLE9BQU8sRUFBRSxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUU7WUFDaEMsSUFBSSxPQUFPLENBQUMsTUFBTSxLQUFLLFNBQVMsRUFBRTtnQkFDaEMsT0FBTyx1QkFBdUIsQ0FBQztvQkFDN0IsU0FBUyxFQUFFLFFBQVE7b0JBQ25CLElBQUksRUFBRSxPQUFPO29CQUNiLFNBQVMsRUFBRSxVQUFVO2lCQUN0QixDQUFDLENBQUM7YUFDSjtpQkFBTTtnQkFDTCxPQUFPLHVCQUF1QixDQUFDO29CQUM3QixTQUFTLEVBQUUsUUFBUTtvQkFDbkIsSUFBSSxFQUFFLE9BQU87b0JBQ2IsU0FBUyxFQUFFLFVBQVU7aUJBQ3RCLENBQUMsQ0FBQzthQUNKO1FBQ0gsQ0FBQyxDQUFDO0tBQ0gsQ0FBQztJQUVGLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRCxTQUFTLHVCQUF1QixDQUFDLEtBQTBCO1FBQ3pELE1BQU0sRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxHQUFHLEtBQUssQ0FBQztRQUM3QyxNQUFNLGNBQWMsR0FBRyxrQkFBUSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFekQsT0FBTztZQUNMLFNBQVM7WUFDVCxRQUFRLEVBQUU7Z0JBQ1IsSUFBSSxFQUFFO29CQUNKLEVBQUUsRUFBRTt3QkFDRixDQUFDLEVBQUUsSUFBSSxDQUFDLEVBQUU7cUJBQ1g7aUJBQ0Y7Z0JBQ0QsUUFBUSxFQUFFLGNBQXFCO2dCQUMvQixRQUFRLEVBQUUsY0FBcUI7YUFDaEM7WUFDRCxjQUFjLEVBQUUsOENBQThDLFNBQVMsaUNBQWlDO1NBQ3pHLENBQUM7SUFDSixDQUFDO0lBRUQsU0FBUyx1QkFBdUIsQ0FBQyxLQUEwQjtRQUN6RCxNQUFNLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsR0FBRyxLQUFLLENBQUM7UUFDN0MsTUFBTSxjQUFjLEdBQUcsa0JBQVEsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXpELE9BQU87WUFDTCxTQUFTO1lBQ1QsUUFBUSxFQUFFO2dCQUNSLElBQUksRUFBRTtvQkFDSixFQUFFLEVBQUU7d0JBQ0YsQ0FBQyxFQUFFLElBQUksQ0FBQyxFQUFFO3FCQUNYO2lCQUNGO2dCQUNELFFBQVEsRUFBRSxjQUFxQjtnQkFDL0IsUUFBUSxFQUFFO29CQUNSLEdBQUcsY0FBYztvQkFDakIsTUFBTSxFQUFFLFVBQWlCO2lCQUMxQjthQUNGO1lBQ0QsY0FBYyxFQUFFLDhDQUE4QyxTQUFTLGlDQUFpQztTQUN6RyxDQUFDO0lBQ0osQ0FBQztBQUNILENBQUM7QUFFRCxjQUFjLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IER5bmFtb0RCUmVjb3JkLCBEeW5hbW9EQlN0cmVhbUV2ZW50IH0gZnJvbSAnYXdzLWxhbWJkYSc7XG5pbXBvcnQgeyBEeW5hbW9EQiB9IGZyb20gJ2F3cy1zZGsnO1xuXG5jb25zdCB2ZWhpY2xlcyA9IFtcbiAge1xuICAgIGlkOiAnMjAyMTEwMjFfUjQ1NjdHVCcsXG4gICAgYXJyaXZhbFB1cnBvc2U6ICdDQVJHT19JTVBPUlQnLFxuICAgIG5ldFdlaWdodDogMCxcbiAgICBzdGF0dXM6ICdBUlJJVkVEJyxcbiAgICBib3JkZXJDaGVja3BvaW50OiAnJyxcbiAgICBkcml2ZXI6IHtcbiAgICAgIG5hbWU6ICdBbnlvbmUnLFxuICAgIH0sXG4gICAgb3BlcmF0b3I6IHtcbiAgICAgIGlkOiAnMDkzYzdiYWYtODk2Yi00ZmQwLWJjMDUtMjUzZWI3ZmFjNjA2JyxcbiAgICAgIG9yZ2FuaXphdGlvbjoge1xuICAgICAgICBuYW1lOiAnJyxcbiAgICAgICAgaWQ6ICc1M2RkYmFlOS0wZDI3LTQyMGEtYjY5Mi02MjIxZTczNGIxOTQnLFxuICAgICAgfSxcbiAgICB9LFxuICAgIHRhcmVXZWlnaHQ6IDAsXG4gICAgZGVwYXJ0dXJlQ291bnRyeTogJ0NoaW5hJyxcbiAgICBvcmdhbml6YXRpb246IHtcbiAgICAgIG5hbWU6ICcnLFxuICAgICAgaWQ6ICc1M2RkYmFlOS0wZDI3LTQyMGEtYjY5Mi02MjIxZTczNGIxOTQnLFxuICAgIH0sXG4gICAgd2VpZ2h0VHlwZTogJ0dST1NTJyxcbiAgICB2ZWhpY2xlUGxhdGVOdW1iZXI6ICdSNDU2N0dUJyxcbiAgICBncm9zc1dlaWdodDogMzAwLFxuICAgIGFycml2YWxEYXRlOiAxNjM0ODA2NzQ3MjQ0LFxuICB9LFxuICB7XG4gICAgaWQ6ICcyMDIxMTAwM18wNUtHOTk4QUFPJyxcbiAgICBhcnJpdmFsUHVycG9zZTogJ0NBUkdPX0lNUE9SVCcsXG4gICAgbmV0V2VpZ2h0OiAwLFxuICAgIHN0YXR1czogJ0RFUEFSVEVEJyxcbiAgICBib3JkZXJDaGVja3BvaW50OiAnSXJrZXNodGFtJyxcbiAgICBkcml2ZXI6IHtcbiAgICAgIG5hbWU6ICfQqNCw0LrQtdC90L7QsiDQrScsXG4gICAgfSxcbiAgICBvcGVyYXRvcjoge1xuICAgICAgaWQ6ICcwOTNjN2JhZi04OTZiLTRmZDAtYmMwNS0yNTNlYjdmYWM2MDYnLFxuICAgICAgb3JnYW5pemF0aW9uOiB7XG4gICAgICAgIG5hbWU6ICcnLFxuICAgICAgICBpZDogJzUzZGRiYWU5LTBkMjctNDIwYS1iNjkyLTYyMjFlNzM0YjE5NCcsXG4gICAgICB9LFxuICAgIH0sXG4gICAgdGFyZVdlaWdodDogMCxcbiAgICBkZXBhcnR1cmVDb3VudHJ5OiAnQ2hpbmEnLFxuICAgIG9yZ2FuaXphdGlvbjoge1xuICAgICAgbmFtZTogJycsXG4gICAgICBpZDogJzUzZGRiYWU5LTBkMjctNDIwYS1iNjkyLTYyMjFlNzM0YjE5NCcsXG4gICAgfSxcbiAgICB3ZWlnaHRUeXBlOiAnR1JPU1MnLFxuICAgIGRlcGFydHVyZURhdGU6IDE2MzMyODY1NjE4MTksXG4gICAgdmVoaWNsZVBsYXRlTnVtYmVyOiAnMDVLRzk5OEFBTycsXG4gICAgZ3Jvc3NXZWlnaHQ6IDAsXG4gICAgYXJyaXZhbERhdGU6IDE2MzMyODIzMTU4MTMsXG4gIH0sXG5dO1xuXG5pbnRlcmZhY2UgUmVjb3JkVGVtcGxhdGVJbnB1dCB7XG4gIGV2ZW50TmFtZTogJ0lOU0VSVCcgfCAnTU9ESUZZJyB8ICdSRU1PVkUnIHwgdW5kZWZpbmVkO1xuICBkYXRhOiBhbnk7XG4gIHRhYmxlTmFtZTogc3RyaW5nO1xufVxuXG5hc3luYyBmdW5jdGlvbiBjb252ZXJ0VG9FdmVudCgpIHtcbiAgY29uc3QgZHluYW1vZGJTdHJlYW1FdmVudDogRHluYW1vREJTdHJlYW1FdmVudCA9IHtcbiAgICBSZWNvcmRzOiB2ZWhpY2xlcy5tYXAoKHZlaGljbGUpID0+IHtcbiAgICAgIGlmICh2ZWhpY2xlLnN0YXR1cyA9PT0gJ0FSUklWRUQnKSB7XG4gICAgICAgIHJldHVybiBnZXRDcmVhdGVSZWNvcmRUZW1wbGF0ZSh7XG4gICAgICAgICAgZXZlbnROYW1lOiAnSU5TRVJUJyxcbiAgICAgICAgICBkYXRhOiB2ZWhpY2xlLFxuICAgICAgICAgIHRhYmxlTmFtZTogJ1ZlaGljbGVzJyxcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZ2V0VXBkYXRlUmVjb3JkVGVtcGxhdGUoe1xuICAgICAgICAgIGV2ZW50TmFtZTogJ01PRElGWScsXG4gICAgICAgICAgZGF0YTogdmVoaWNsZSxcbiAgICAgICAgICB0YWJsZU5hbWU6ICdWZWhpY2xlcycsXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pLFxuICB9O1xuXG4gIGNvbnNvbGUubG9nKEpTT04uc3RyaW5naWZ5KGR5bmFtb2RiU3RyZWFtRXZlbnQsIG51bGwsIDIpKTtcblxuICBmdW5jdGlvbiBnZXRDcmVhdGVSZWNvcmRUZW1wbGF0ZShpbnB1dDogUmVjb3JkVGVtcGxhdGVJbnB1dCk6IER5bmFtb0RCUmVjb3JkIHtcbiAgICBjb25zdCB7IGV2ZW50TmFtZSwgZGF0YSwgdGFibGVOYW1lIH0gPSBpbnB1dDtcbiAgICBjb25zdCBtYXJzaGFsbGVkRGF0YSA9IER5bmFtb0RCLkNvbnZlcnRlci5tYXJzaGFsbChkYXRhKTtcblxuICAgIHJldHVybiB7XG4gICAgICBldmVudE5hbWUsXG4gICAgICBkeW5hbW9kYjoge1xuICAgICAgICBLZXlzOiB7XG4gICAgICAgICAgaWQ6IHtcbiAgICAgICAgICAgIFM6IGRhdGEuaWQsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgTmV3SW1hZ2U6IG1hcnNoYWxsZWREYXRhIGFzIGFueSxcbiAgICAgICAgT2xkSW1hZ2U6IG1hcnNoYWxsZWREYXRhIGFzIGFueSxcbiAgICAgIH0sXG4gICAgICBldmVudFNvdXJjZUFSTjogYGFybjphd3M6ZHluYW1vZGI6cmVnaW9uOjEyMzQ1Njc4OTAxMjp0YWJsZS8ke3RhYmxlTmFtZX0vc3RyZWFtLzIwMTYtMTEtMTZUMjA6NDI6NDguMTA0YCxcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0VXBkYXRlUmVjb3JkVGVtcGxhdGUoaW5wdXQ6IFJlY29yZFRlbXBsYXRlSW5wdXQpOiBEeW5hbW9EQlJlY29yZCB7XG4gICAgY29uc3QgeyBldmVudE5hbWUsIGRhdGEsIHRhYmxlTmFtZSB9ID0gaW5wdXQ7XG4gICAgY29uc3QgbWFyc2hhbGxlZERhdGEgPSBEeW5hbW9EQi5Db252ZXJ0ZXIubWFyc2hhbGwoZGF0YSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgZXZlbnROYW1lLFxuICAgICAgZHluYW1vZGI6IHtcbiAgICAgICAgS2V5czoge1xuICAgICAgICAgIGlkOiB7XG4gICAgICAgICAgICBTOiBkYXRhLmlkLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIE5ld0ltYWdlOiBtYXJzaGFsbGVkRGF0YSBhcyBhbnksXG4gICAgICAgIE9sZEltYWdlOiB7XG4gICAgICAgICAgLi4ubWFyc2hhbGxlZERhdGEsXG4gICAgICAgICAgc3RhdHVzOiAnREVQQVJURUQnIGFzIGFueSxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgICBldmVudFNvdXJjZUFSTjogYGFybjphd3M6ZHluYW1vZGI6cmVnaW9uOjEyMzQ1Njc4OTAxMjp0YWJsZS8ke3RhYmxlTmFtZX0vc3RyZWFtLzIwMTYtMTEtMTZUMjA6NDI6NDguMTA0YCxcbiAgICB9O1xuICB9XG59XG5cbmNvbnZlcnRUb0V2ZW50KCk7XG4iXX0=