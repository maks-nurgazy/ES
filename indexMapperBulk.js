"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = exports.WeightType = exports.VehicleStatus = exports.VehicleArrivalPurpose = void 0;
const aws_sdk_1 = require("aws-sdk");
const opensearch_1 = require("@opensearch-project/opensearch");
const ES_HOST = '127.0.0.1';
const ES_PORT = 9200;
const esClient = new opensearch_1.Client({
    node: `http://${ES_HOST}:${ES_PORT}`,
});
var VehicleArrivalPurpose;
(function (VehicleArrivalPurpose) {
    VehicleArrivalPurpose["ARREST"] = "ARREST";
    VehicleArrivalPurpose["CARGO_EXTRACTION"] = "CARGO_EXTRACTION";
    VehicleArrivalPurpose["CARGO_IMPORT"] = "CARGO_IMPORT";
    VehicleArrivalPurpose["PARKING"] = "PARKING";
    VehicleArrivalPurpose["PARKING_WITH_CARGO"] = "PARKING_WITH_CARGO";
    VehicleArrivalPurpose["WEIGHIN"] = "WEIGHIN";
})(VehicleArrivalPurpose = exports.VehicleArrivalPurpose || (exports.VehicleArrivalPurpose = {}));
var VehicleStatus;
(function (VehicleStatus) {
    VehicleStatus["ARRIVED"] = "ARRIVED";
    VehicleStatus["DEPARTED"] = "DEPARTED";
})(VehicleStatus = exports.VehicleStatus || (exports.VehicleStatus = {}));
var WeightType;
(function (WeightType) {
    WeightType["GROSS"] = "GROSS";
    WeightType["TARE"] = "TARE";
})(WeightType = exports.WeightType || (exports.WeightType = {}));
async function handler(event) {
    const bulkData = [];
    for (let record of event.Records) {
        const { eventSourceARN, eventName, dynamodb } = record;
        if (!eventSourceARN || !eventName || !dynamodb)
            continue;
        const match = eventSourceARN.match(/.+:table\/([^"]+)\/stream/);
        const { NewImage, OldImage, Keys } = dynamodb;
        if (!match)
            continue;
        const [, tableName] = match;
        console.log(`Event from ${tableName}`);
        // INSERT event
        if (eventName === 'INSERT') {
            if (!NewImage)
                continue;
            const newVehicle = aws_sdk_1.DynamoDB.Converter.unmarshall(NewImage);
            bulkData.push(...createIndex(getHotIndex(tableName), newVehicle));
        }
        // Update event
        if (eventName === 'MODIFY') {
            if (!NewImage || !OldImage)
                continue;
            const newVehicle = aws_sdk_1.DynamoDB.Converter.unmarshall(NewImage);
            const oldVehicle = aws_sdk_1.DynamoDB.Converter.unmarshall(OldImage);
            if (newVehicle.status === VehicleStatus.DEPARTED &&
                oldVehicle.status === VehicleStatus.ARRIVED) {
                bulkData.push(deleteIndex(getHotIndex(tableName), newVehicle.id));
                bulkData.push(...createIndex(getColdIndex(tableName), newVehicle));
            }
            else {
                bulkData.push(...updateIndex(getVehicleIndex(newVehicle, tableName), newVehicle));
            }
        }
    }
    const data = await esClient.bulk({ body: bulkData, refresh: true });
    printResponse(data);
    function updateIndex(index, data) {
        return [
            {
                delete: { _index: index, _id: data.id },
            },
            { doc: data },
        ];
    }
    function deleteIndex(index, id) {
        return {
            delete: { _index: index, _id: id },
        };
    }
    /*
    index: If the document exists, replaces the document and increments the version.
    create: Indexes the specified document if it does not already exist.
    */
    function createIndex(index, data) {
        return [
            {
                index: { _index: index, _id: data.id },
            },
            data,
        ];
    }
    function getVehicleIndex(vehicle, tableName) {
        if (vehicle.status === VehicleStatus.DEPARTED) {
            return getColdIndex(tableName);
        }
        return getHotIndex(tableName);
    }
    function getColdIndex(tableName) {
        return `${tableName.toLowerCase()}-cold`;
    }
    function getHotIndex(tableName) {
        return `${tableName.toLowerCase()}-hot`;
    }
}
exports.handler = handler;
function printResponse(response) {
    console.log(JSON.stringify(response, null, 2));
}
const hotArrivedCargoImport = {
    ApproximateCreationDateTime: 1479499740,
    Keys: {
        id: {
            S: '20211028_05KG711ABJ',
        },
    },
    NewImage: {
        id: {
            S: '20211028_05KG711ABJ',
        },
        arrivalPurpose: {
            S: 'CARGO_IMPORT',
        },
        netWeight: {
            N: '0',
        },
        trailerPlateNumber: {
            S: '05KG997PA',
        },
        status: {
            S: 'ARRIVED',
        },
        borderCheckpoint: {
            S: 'Torugart',
        },
        operator: {
            M: {
                id: {
                    S: 'fab1a253-4b7e-4269-adbf-b3c141d99dac',
                },
                organization: {
                    M: {
                        id: {
                            S: '61ba7c84-1ad5-4a37-88a9-15892b58be22',
                        },
                    },
                },
            },
        },
        driver: {
            M: {
                name: {
                    S: 'Токтобаев М',
                },
            },
        },
        tareWeight: {
            N: '0',
        },
        departureCountry: {
            S: 'China',
        },
        organization: {
            M: {
                id: {
                    S: '61ba7c84-1ad5-4a37-88a9-15892b58be22',
                },
            },
        },
        weightType: {
            S: 'GROSS',
        },
        vehiclePlateNumber: {
            S: '05KG711ABJ',
        },
        grossWeight: {
            N: '0',
        },
        arrivalDate: {
            N: '1635413689730',
        },
    },
    SequenceNumber: '13021600000000001596893679',
    SizeBytes: 112,
    StreamViewType: 'NEW_AND_OLD_IMAGES',
};
const createData = {
    ApproximateCreationDateTime: 1479499740,
    Keys: {
        id: {
            S: 'maks',
        },
    },
    NewImage: {
        id: {
            S: 'maks',
        },
        arrivalPurpose: {
            S: 'CARGO_IMPORT',
        },
        netWeight: {
            N: '0',
        },
        trailerPlateNumber: {
            S: '05KG997PA',
        },
        status: {
            S: 'ARRIVED',
        },
        borderCheckpoint: {
            S: 'Torugart',
        },
        operator: {
            M: {
                id: {
                    S: 'fab1a253-4b7e-4269-adbf-b3c141d99dac',
                },
                organization: {
                    M: {
                        id: {
                            S: '61ba7c84-1ad5-4a37-88a9-15892b58be22',
                        },
                    },
                },
            },
        },
        driver: {
            M: {
                name: {
                    S: 'Токтобаев М',
                },
            },
        },
        tareWeight: {
            N: '0',
        },
        departureCountry: {
            S: 'China',
        },
        organization: {
            M: {
                id: {
                    S: '61ba7c84-1ad5-4a37-88a9-15892b58be22',
                },
            },
        },
        weightType: {
            S: 'GROSS',
        },
        vehiclePlateNumber: {
            S: '05KG711ABJ',
        },
        grossWeight: {
            N: '0',
        },
        arrivalDate: {
            N: '1635413689730',
        },
    },
    SequenceNumber: '13021600000000001596893679',
    SizeBytes: 112,
    StreamViewType: 'NEW_AND_OLD_IMAGES',
};
const coldCargoImport = {
    Keys: {
        id: {
            S: '20211028_05KG711ABJ',
        },
    },
    NewImage: {
        id: {
            S: '20211028_05KG711ABJ',
        },
        arrivalPurpose: {
            S: 'CARGO_IMPORT',
        },
        netWeight: {
            N: '0',
        },
        trailerPlateNumber: {
            S: '05KG997PA',
        },
        status: {
            S: 'DEPARTED',
        },
        borderCheckpoint: {
            S: 'Torugart',
        },
        operator: {
            M: {
                id: {
                    S: 'fab1a253-4b7e-4269-adbf-b3c141d99dac',
                },
                organization: {
                    M: {
                        id: {
                            S: '61ba7c84-1ad5-4a37-88a9-15892b58be22',
                        },
                    },
                },
            },
        },
        driver: {
            M: {
                name: {
                    S: 'Токтобаев М',
                },
            },
        },
        tareWeight: {
            N: '0',
        },
        departureCountry: {
            S: 'China',
        },
        organization: {
            M: {
                id: {
                    S: '61ba7c84-1ad5-4a37-88a9-15892b58be22',
                },
            },
        },
        weightType: {
            S: 'GROSS',
        },
        vehiclePlateNumber: {
            S: '05KG711ABJ',
        },
        grossWeight: {
            N: '0',
        },
        arrivalDate: {
            N: '1635413689730',
        },
    },
    OldImage: {
        id: {
            S: '20211028_05KG711ABJ',
        },
        arrivalPurpose: {
            S: 'CARGO_IMPORT',
        },
        netWeight: {
            N: '0',
        },
        trailerPlateNumber: {
            S: '05KG997PA',
        },
        status: {
            S: 'ARRIVED',
        },
        borderCheckpoint: {
            S: 'Torugart',
        },
        operator: {
            M: {
                id: {
                    S: 'fab1a253-4b7e-4269-adbf-b3c141d99dac',
                },
                organization: {
                    M: {
                        id: {
                            S: '61ba7c84-1ad5-4a37-88a9-15892b58be22',
                        },
                    },
                },
            },
        },
        driver: {
            M: {
                name: {
                    S: 'Токтобаев М',
                },
            },
        },
        tareWeight: {
            N: '0',
        },
        departureCountry: {
            S: 'China',
        },
        organization: {
            M: {
                id: {
                    S: '61ba7c84-1ad5-4a37-88a9-15892b58be22',
                },
            },
        },
        weightType: {
            S: 'GROSS',
        },
        vehiclePlateNumber: {
            S: '05KG711ABJ',
        },
        grossWeight: {
            N: '0',
        },
        arrivalDate: {
            N: '1635413689730',
        },
    },
    SequenceNumber: '13021600000000001596893679',
    SizeBytes: 112,
    StreamViewType: 'NEW_AND_OLD_IMAGES',
};
const createRecord = {
    eventID: '7de3041dd709b024af6f29e4fa13d34c',
    eventName: 'INSERT',
    eventVersion: '1.1',
    eventSource: 'aws:dynamodb',
    awsRegion: 'us-west-2',
    dynamodb: hotArrivedCargoImport,
    eventSourceARN: `arn:aws:dynamodb:region:123456789012:table/Vehicles/stream/2016-11-16T20:42:48.104`,
};
const createRecordData = {
    eventID: '7de3041dd709b024af6f29e4fa13d34c',
    eventName: 'INSERT',
    eventVersion: '1.1',
    eventSource: 'aws:dynamodb',
    awsRegion: 'us-west-2',
    dynamodb: createData,
    eventSourceARN: `arn:aws:dynamodb:region:123456789012:table/Vehicles/stream/2016-11-16T20:42:48.104`,
};
const updateRecord = {
    eventID: '7de3041dd709b024af6f29e4fa13d3js',
    eventName: 'MODIFY',
    eventVersion: '1.1',
    eventSource: 'aws:dynamodb',
    awsRegion: 'us-west-2',
    dynamodb: coldCargoImport,
    eventSourceARN: `arn:aws:dynamodb:region:123456789012:table/Vehicles/stream/2016-11-16T20:42:48.104`,
};
async function doJob() {
    const data = {
        Records: [createRecord, createRecordData, updateRecord],
    };
    await handler(data);
}
doJob();
//# sourceMappingURL=data:application/json;base64,